// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ova_travel_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TravelRpcClient is the client API for TravelRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TravelRpcClient interface {
	CreateTravel(ctx context.Context, in *CreateTravelRequest, opts ...grpc.CallOption) (*CreateTravelResponse, error)
	MultipleCreateTravel(ctx context.Context, in *MultipleCreateTravelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTravel(ctx context.Context, in *UpdateTravelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DescribeTravel(ctx context.Context, in *DescribeTravelRequest, opts ...grpc.CallOption) (*DescribeTravelResponse, error)
	ListTravels(ctx context.Context, in *ListTravelsRequest, opts ...grpc.CallOption) (*ListTravelsResponse, error)
	RemoveTravel(ctx context.Context, in *RemoveTravelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type travelRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTravelRpcClient(cc grpc.ClientConnInterface) TravelRpcClient {
	return &travelRpcClient{cc}
}

func (c *travelRpcClient) CreateTravel(ctx context.Context, in *CreateTravelRequest, opts ...grpc.CallOption) (*CreateTravelResponse, error) {
	out := new(CreateTravelResponse)
	err := c.cc.Invoke(ctx, "/ova.travel.api.TravelRpc/CreateTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelRpcClient) MultipleCreateTravel(ctx context.Context, in *MultipleCreateTravelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.travel.api.TravelRpc/MultipleCreateTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelRpcClient) UpdateTravel(ctx context.Context, in *UpdateTravelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.travel.api.TravelRpc/UpdateTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelRpcClient) DescribeTravel(ctx context.Context, in *DescribeTravelRequest, opts ...grpc.CallOption) (*DescribeTravelResponse, error) {
	out := new(DescribeTravelResponse)
	err := c.cc.Invoke(ctx, "/ova.travel.api.TravelRpc/DescribeTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelRpcClient) ListTravels(ctx context.Context, in *ListTravelsRequest, opts ...grpc.CallOption) (*ListTravelsResponse, error) {
	out := new(ListTravelsResponse)
	err := c.cc.Invoke(ctx, "/ova.travel.api.TravelRpc/ListTravels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelRpcClient) RemoveTravel(ctx context.Context, in *RemoveTravelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.travel.api.TravelRpc/RemoveTravel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TravelRpcServer is the server API for TravelRpc service.
// All implementations must embed UnimplementedTravelRpcServer
// for forward compatibility
type TravelRpcServer interface {
	CreateTravel(context.Context, *CreateTravelRequest) (*CreateTravelResponse, error)
	MultipleCreateTravel(context.Context, *MultipleCreateTravelRequest) (*emptypb.Empty, error)
	UpdateTravel(context.Context, *UpdateTravelRequest) (*emptypb.Empty, error)
	DescribeTravel(context.Context, *DescribeTravelRequest) (*DescribeTravelResponse, error)
	ListTravels(context.Context, *ListTravelsRequest) (*ListTravelsResponse, error)
	RemoveTravel(context.Context, *RemoveTravelRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTravelRpcServer()
}

// UnimplementedTravelRpcServer must be embedded to have forward compatible implementations.
type UnimplementedTravelRpcServer struct {
}

func (UnimplementedTravelRpcServer) CreateTravel(context.Context, *CreateTravelRequest) (*CreateTravelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTravel not implemented")
}
func (UnimplementedTravelRpcServer) MultipleCreateTravel(context.Context, *MultipleCreateTravelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultipleCreateTravel not implemented")
}
func (UnimplementedTravelRpcServer) UpdateTravel(context.Context, *UpdateTravelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTravel not implemented")
}
func (UnimplementedTravelRpcServer) DescribeTravel(context.Context, *DescribeTravelRequest) (*DescribeTravelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeTravel not implemented")
}
func (UnimplementedTravelRpcServer) ListTravels(context.Context, *ListTravelsRequest) (*ListTravelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTravels not implemented")
}
func (UnimplementedTravelRpcServer) RemoveTravel(context.Context, *RemoveTravelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTravel not implemented")
}
func (UnimplementedTravelRpcServer) mustEmbedUnimplementedTravelRpcServer() {}

// UnsafeTravelRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TravelRpcServer will
// result in compilation errors.
type UnsafeTravelRpcServer interface {
	mustEmbedUnimplementedTravelRpcServer()
}

func RegisterTravelRpcServer(s grpc.ServiceRegistrar, srv TravelRpcServer) {
	s.RegisterService(&TravelRpc_ServiceDesc, srv)
}

func _TravelRpc_CreateTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelRpcServer).CreateTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.travel.api.TravelRpc/CreateTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelRpcServer).CreateTravel(ctx, req.(*CreateTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelRpc_MultipleCreateTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleCreateTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelRpcServer).MultipleCreateTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.travel.api.TravelRpc/MultipleCreateTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelRpcServer).MultipleCreateTravel(ctx, req.(*MultipleCreateTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelRpc_UpdateTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelRpcServer).UpdateTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.travel.api.TravelRpc/UpdateTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelRpcServer).UpdateTravel(ctx, req.(*UpdateTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelRpc_DescribeTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelRpcServer).DescribeTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.travel.api.TravelRpc/DescribeTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelRpcServer).DescribeTravel(ctx, req.(*DescribeTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelRpc_ListTravels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTravelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelRpcServer).ListTravels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.travel.api.TravelRpc/ListTravels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelRpcServer).ListTravels(ctx, req.(*ListTravelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TravelRpc_RemoveTravel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTravelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelRpcServer).RemoveTravel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.travel.api.TravelRpc/RemoveTravel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelRpcServer).RemoveTravel(ctx, req.(*RemoveTravelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TravelRpc_ServiceDesc is the grpc.ServiceDesc for TravelRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TravelRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ova.travel.api.TravelRpc",
	HandlerType: (*TravelRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTravel",
			Handler:    _TravelRpc_CreateTravel_Handler,
		},
		{
			MethodName: "MultipleCreateTravel",
			Handler:    _TravelRpc_MultipleCreateTravel_Handler,
		},
		{
			MethodName: "UpdateTravel",
			Handler:    _TravelRpc_UpdateTravel_Handler,
		},
		{
			MethodName: "DescribeTravel",
			Handler:    _TravelRpc_DescribeTravel_Handler,
		},
		{
			MethodName: "ListTravels",
			Handler:    _TravelRpc_ListTravels_Handler,
		},
		{
			MethodName: "RemoveTravel",
			Handler:    _TravelRpc_RemoveTravel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ova-travel-api.proto",
}
